/** Pen-Testing Drone Schematics 

HANDLING WIRELESS COMMUNICATION WITH THE DRONE:

Handling Tranciever/Reciever Communication: 
    # Using the Serial Interface (App when completed), We'll send data to the drone, either to start or move the drone.
    # Our Wireless reciever will Recieve the command, and report back a response to us.
    # We will be intergrating the module with the GY_521 module to properly control and fly the drone

Commands: List of commands our drone is capable of recieving 
    # Take-Off
    # Land
    # Move Forward
    # Move Backward
    # Move Right 
    # Move Left
    # Rotate ClockWise
    # Rotate CounterClockwise

Main Components:
    # 2 nRF24LO1 Modules 
    # 2 Arduino Uno Type Boards 
    # Reciever Program 
    # Transmitter Program


HANDLING THE FLIGHT CONTROLLER MODULE FOR THE DRONE:
    TESTING THE CONFIGURATION: 

    # When the Drone is powered on it will wait for a command 
    # Once the drone recieves the the takeoff command, the mototrs will move at a set speed to to raise the altitude
        to a desirable height 
    # Once we find the desired height we want to drone to start at, we will record the findinngs of the GY_521 and save it for the take off command
    # We will rinse and repeat for the movement options of the drone
    # Once we find the neccessary settings, we will configure commands to go through the GY_521 module to control, orientate, and fly the drone

    CALIBRATIING THE GY_521:
    # When the Drone starts the nRF24LO1 reciever will wait for for commands from our nRF24LO1 transmitter
    # When the transmitter sends a commmand, the reciever will handle it, communication and setting the registers in the 
        GY_521 module
    # Depending on the command set, GY_521 module will control the motors to make neccessary movement

MOTOR ORDER:
    FRONT-RIGHT = ORANGE CABLES(PIN3)
    FRONT-LEFT = YELLOW CABLES(PIN5)
    BACK-LEFT = WHITE CABLES(PIN9)
    BACK-RIGHT = BLACK CABLES(BLUE CABLE TO PIN10)

Main Components:
    # GY_521 Modules to provide flight control for our drone
    # GY_521 Flight controller Program 

HANDLING THE SOLDERING AND SET UP OF THE DRONE: (See the picture for an example as to how I decided to Set this up)
    # Prep the Setup of the GY_521 Module on a (if available) 2 or 3 inch bread board (horizaontally facing, or which ever way the board is 
        set up to distribute currents properly (vertically on bigger boards, horizaontally usually on smaller boards without power rail indicators)
    # Connect all the pins of the GY_521 module to the bread board. Try to keep the spacing decent when setting this up
    # Connect from the Aruino board: 5v, gnd, scl, & sda to their respective positions of the marked pins of the GY_521 module
    # Connect from the Arduino board, pins(~ marked ones for PWM) 4 desired pins with the stated PWM marking, to spots on the board. Keep them 
        away from the GY_521 pins as to not confuse wiring.
    # 
    # Solder the 3 ends of the brushless motors to the 3 pads on the ESC (TOP SIDE WHERE THE (-) AND (+) icons are shown)
    # Solder all the red (+) wires of the esc's together, along with a 4th wire that will serve to connect to the battery
    # Rinse and repeat this process for the black (-) wires
    

RASPBERRY PI ZERO UDP BACKDOOR MODULE CONFIGURATION:
    Main Components:
        # Raspberry Pi zero with auto-login enabled for Kali-Linux
        # UDP BackDoor Server Configured to automate and run our Aircrack-ng scripts
        # Aircrack-ng Automation bash script to begin scanning for access points
        # Aircrack-ng kill bash script to set the NIC back to normal and stop the scan, allowing us to communicate with the server again 

    HOW TO PROGRAM WILL WORK:
        # When the pi Zero system boots, it will auto-login into the main root account
        # The TCP Server will exeute via a bash script, which will be set to  run when the system is done booting
        # The TCP Server will run in the background of the system and wait for us to give it commands. 
        # We will execute the Aircrack-ng script using our TCP Client end.
        # When we enter the command "scan", the server will execute the Aircrack-ng script, in which it will scan for 10 seconds.
        # After 10 seconds, the TCP Server will execute a another bash script that will terminate the Aircrack-ng script
        # We will reconnect to the server and (if we have to), and simply read all the data from the scan.
        # When we are ready to select a target, we will execute an attack script version of the Aircrack-ng script.
        # The script will set the NIC back into monitor mode, and run the airoplay-ng command to deauthenticate everyone from a target network of choice, in which we will observe the cap file data
        # Once a handshake is captured, will save the cap file on our end, and bruteforce the password, taking a snap shot of the area the drone has been in order to capture coordinates




Further Testing: Drone Breaching:
Once Credentials are gathered for a desired network, the drone will attempt to login to the network
It will sniff out traffic data on the network to detect live systems, and record it's findings in a text file, "NetworkSniffData"
The drone will drop mini backdoors onto live systems available on the network, in which we can communicate with whenever we accessn the network 


**/
