//Test

#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include "Wire.h" // This library allows you to communicate with I2C devices (GY_521 Module).
#include <Servo.h>

//Min and Max values to send to our ESC Motors 
#define MAX_SIGNAL 2000
#define MIN_SIGNAL 1000 

//Servo Motor Objects (ESC's) and corresponding pins
Servo ESCPin3, ESCPin5, ESCPin9, ESCPin10;
int Pin3 = 3;
int Pin5 = 5;
int Pin9 = 9;
int Pin10 = 10;
int Motor3 = 1000;
int Motor5 = 1000;
int Motor9 = 1000;
int Motor10 = 1000;

//Wireless Reciever Objects
RF24 radio(7, 8); //Radio object
const byte DataChannel[][6] = {"00001", "00002"}; //address of the communication channel of the transmitter
const char DroneCmd[35] = ""; //Drone Cmd being read
const char RecieverResponse[] = "CMD RECIEVED & EXECUTED!";

//GY_521 Objects
const int GY_521_Addr = 0x68; // I2C address of the MPU-6050 (GY_521 module). If AD0 pin is set to HIGH, the I2C address will be 0x69.
int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data
int16_t temperature; // variables for temperature data
char tmp_str[7]; // temporary variable used in convert function


void setup()
{
    //Begin setting up the serial and wireless communication pipes
    Serial.begin(9600);
    radio.begin(); //Begins radio communicationn
    radio.openWritingPipe(DataChannel[1]); // Writes data to a defined address
    radio.openReadingPipe(1, DataChannel[0]); // Recieves response data 
    radio.setPALevel(RF24_PA_MIN); //Power Amplifier level

    //Begin setting up communication with the GY_521 module 
    Wire.begin();
    Wire.beginTransmission(GY_521_Addr); // Begins a transmission to the I2C slave (GY-521 board)
    Wire.write(0x6B); // PWR_MGMT_1 register
    Wire.write(0); // set to zero (wakes up the MPU-6050)
    Wire.endTransmission(true);

    //Begin Attatching all the motors to their respective pins
    ESCPin3.attach(Pin3);
    ESCPin5.attach(Pin5);
    ESCPin9.attach(Pin9);
    ESCPin10.attach(Pin10);

    //When the arduino recieves power, it will delay by 2 deconds, then signal a connection to the ESC servo motors
    //MAKE SURE THE MOTORS ARE POWERED ON FIRST!!!!!
    delay(2000);
    delay(2000);
    delay(2000);
    ESCPin3.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin5.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin9.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin10.writeMicroseconds(MIN_SIGNAL);
    delay(2000);
    delay(2000);
    delay(2000);
    ESCPin3.writeMicroseconds(1500);
    delay(500);
    ESCPin5.writeMicroseconds(1500);
    delay(500);
    ESCPin9.writeMicroseconds(1500);
    delay(500);
    ESCPin10.writeMicroseconds(1500);
    delay(2000);
    delay(2000);
    delay(2000);
    ESCPin3.writeMicroseconds(1100);
    delay(500);
    ESCPin5.writeMicroseconds(1100);
    delay(500);
    ESCPin9.writeMicroseconds(1100);
    delay(500);
    ESCPin10.writeMicroseconds(1100);
    delay(2000);
    ESCPin3.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin5.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin9.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin10.writeMicroseconds(MIN_SIGNAL);
    
}

//CONFIG TEST
void loop()
{   
   //The drone will wait for a command from the transmitter 
   //FlightController();
   
   //Uncomment to test gyroscope data
  // GY521Data();
    //Uncomment this to test the motors

    
}

