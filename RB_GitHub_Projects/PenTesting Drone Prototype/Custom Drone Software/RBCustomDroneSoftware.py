#Disecting the tello drone code
#This is test code software to create drones
import socket
import sys
import os
import threading
import time
from PyQt5 import QtWidgets, QtGui
from PyQt5.QtWidgets import(QApplication, QMainWindow, qApp, QSlider, QHBoxLayout, QPushButton, QLabel, QWidget, QLineEdit, QVBoxLayout, QTextEdit, QRadioButton, QCheckBox)

#Create the UDP sockets to send and recieve commands and video transmission from and to the drone
CmdSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #Used to send commands to the drone and functions as our server
#VidSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #Used to recieve vid transmission (THIS IS IF WE HAVE VIDEO TRANSMISSION)

#Define the IP and port of the tello drone and the server 
CustomDroneIP = "192.168.10.1"
CustomDronePort = 8889
CustomDroneAddress = (CustomDroneIP, CustomDronePort)

CmdSocketIp = ''
CmdSocketPort = 8889
CmdSocketAddress = (CmdSocketIp, CmdSocketPort)

def DroneGUI():
	#Main_app set up
	Bash_interface_App = QtWidgets.QApplication(sys.argv)
	Bash_interface_Win = QtWidgets.QWidget()
	
	#Modules
	DroneGUIImage = QtWidgets.QLabel(Bash_interface_Win)
	MoveUp = QtWidgets.QPushButton(Bash_interface_Win)
	MoveDown = QtWidgets.QPushButton(Bash_interface_Win)
	RotateCW = QtWidgets.QPushButton(Bash_interface_Win)
	RotateCCW = QtWidgets.QPushButton(Bash_interface_Win)
	LandDrone = QtWidgets.QPushButton(Bash_interface_Win)
	DroneTakeOff = QtWidgets.QPushButton(Bash_interface_Win)
	MoveForward = QtWidgets.QPushButton(Bash_interface_Win)
	MoveBackward = QtWidgets.QPushButton(Bash_interface_Win)
	MoveLeft = QtWidgets.QPushButton(Bash_interface_Win)
	MoveRight = QtWidgets.QPushButton(Bash_interface_Win)
	
	
	#Module modifications
	DroneGUIImage.setPixmap(QtGui.QPixmap("futaba2.jpg"))
	
	MoveForward.move(475, 25)
	MoveForward.setText("Move_Forward")
	MoveForward.clicked.connect(MoveForward)
	
	MoveBackward.move(475, 50)
	MoveBackward.setText("Move_Backward")
	MoveBackward.clicked.connect(MoveBackward)
	
	MoveLeft.move(475, 70)
	MoveLeft.setText("Move_Left")
	MoveLeft.clicked.connect(MoveLeft)
	
	MoveRight.move(475, 100)
	MoveRight.setText("Move_Right")
	MoveRight.clicked.connect(MoveRight)
	
	MoveUp.move(475, 175)
	MoveUp.setText("Move_Up")
	MoveUp.clicked.connect(MoveUp)

	MoveDown.move(475, 200)
	MoveDown.setText("Move_Down")
	MoveDown.clicked.connect(MoveDown)
	
	RotateCW.move(475, 270)
	RotateCW.setText("Rotate_ClockWise")
	RotateCW.clicked.connect(RotateClockWise)
	
	RotateCCW.move(475, 300)
	RotateCCW.setText("Rotate_Counter_ClockWise")
	RotateCCW.clicked.connect(RotateCounterClockWise)
	
	LandDrone.move(475, 350)
	LandDrone.setText("Land_Drone")
	LandDrone.clicked.connect(LandDrone)
	
	DroneTakeOff.move(475, 400)
	DroneTakeOff.setText("Drone_TakeOff")
	DroneTakeOff.clicked.connect(DroneTakeOff)
	
	#App modificationss
	Bash_interface_Win.setWindowTitle("$RBCustomDroneSoftware <\>$")
	Bash_interface_Win.setGeometry(1000, 1000, 680, 675)
	
	#App ends here
	Bash_interface_Win.show()
	sys.exit(Bash_interface_App.exec_())
	

#Develop a command list for our drone to take string data and convert it into bytes
#Configure how you want the drone to handle movements commands (use float for easy use)
#Configure the key bindings for PYQT5 for the drone

#COMMAND LIST FOR DRONE

#Initiates flight take off
def DroneTakeOff():

    data = "takeoff"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Lands the drone
def LandDrone():
    
    data = "land"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone up
def MoveUp():
    
    data = "up 2"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone down
def MoveDown():
    
    data = "down 2"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)


#Allows the drone to move forward a certain distance 
def MoveForward():

    data = "forward 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Allows the drone to move backward a certain distance
def MoveBackward():
    
    data = "backward 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Allows the drone to move left a certain distance
def MoveLeft():
    
    data = "left 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Allows the drone to move right a certain distance
def MoveRight():
    
    data = "right 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone clockwise
def RotateClockWise():
    
    data = "cw 30"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone counterclockwise
def RotateCounterClockWise():
    
    data = "ccw 30"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

def DroneResponse():
    print("Waiting for a connection")
    while True:
        DroneConnnectionData, DroneIP = CmdSocket.recvfrom(3000)

        if DroneConnnectionData:
            print("Connection From Tello: => ", DroneIP)
            print("Response: => ", DroneConnnectionData)

#Set up the Server side of the network connection to the drone to send commands to it
def DroneSetup():
    
    #Bind our UDP server
    CmdSocket.bind(CmdSocketAddress)

    #Define the Drone GUI thread 
    GUI = threading.Thread(target=DroneGUI)
    GUI.daemon = True

    #Call the main threads of the program
    GUI.start()
    time.sleep(3)
    DroneResponse()

DroneSetup() 

