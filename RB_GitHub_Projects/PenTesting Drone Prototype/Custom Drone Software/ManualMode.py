#Disecting the tello drone code
#This is test code software to create drones
import socket
import sys
import os
import threading

#Create the UDP sockets to send and recieve commands and video transmission from and to the drone
CmdSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #Used to send commands to the drone and functions as our server
#VidSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) #Used to recieve vid transmission (THIS IS IF WE HAVE VIDEO TRANSMISSION)

#Define the IP and port of the tello drone and the server 
CustomDroneIP = "192.168.10.1"
CustomDronePort = 8889
CustomDroneAddress = (CustomDroneIP, CustomDronePort)

CmdSocketIp = ''
CmdSocketPort = 8889
CmdSocketAddress = (CmdSocketIp, CmdSocketPort)



#Develop a command list for our drone to take string data and convert it into bytes
#Configure how you want the drone to handle movements commands (use float for easy use)
#Configure the key bindings for PYQT5 for the drone

#COMMAND LIST FOR DRONE

#Initiates flight take off
def TakeOff():

    data = "takeoff"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Lands the drone
def LandDrone():
    
    data = "land"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone up
def MoveUp():
    
    data = "up 2"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone down
def MoveDown():
    
    data = "down 2"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)


#Allows the drone to move forward a certain distance 
def MoveForward():

    data = "forward 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Allows the drone to move backward a certain distance
def MoveBackward():
    
    data = "backward 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Allows the drone to move left a certain distance
def MoveLeft():
    
    data = "left 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Allows the drone to move right a certain distance
def MoveRight():
    
    data = "right 1"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone clockwise
def RotateClockWise():
    
    data = "cw 30"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Rotates the drone counterclockwise
def RotateCounterClockWise():
    
    data = "ccw 30"
    TakeOffCommand = str.encode(data)
    CmdSocket.sendto(TakeOffCommand, CustomDroneAddress)

#Set up the Server side of the network connection to the drone to send commands to it
def DroneSetup():

    #Bind our UDP server
    CmdSocket.bind(CmdSocketAddress)

    print("You have the option to also enter commands manually to the drone")
    print("ENTER THE DISTANCE FOLLOWED BY THE APPROPRIATE COMMAND TO MOVE THE DRONE")
    print("EX: takeoff 2 (Moves the drone 2m")
    print("takeoff, enter: => takeoff ")
    print("land, enter: => land")
    print("forward, enter: => forward")
    print("backward, enter: => backward")
    print("left, enter: => left")
    print("right, enter: => right")
    print("clockwise, enter: => rcw")
    print("counter clockwise, enter: => rccw")
    print("ENTER exit to exit")
    
    while True:

        DroneCMD = input("Enter a command now")

        if DroneCMD == "exit":
            break

        elif DroneCMD == "takeoff":
            
            TakeOff()

        elif DroneCMD == "land":

            LandDrone()

        elif DroneCMD == "up":

            MoveUp()

        elif DroneCMD == "down":

            MoveDown()

        elif DroneCMD == "forward":

            MoveForward()

        elif DroneCMD == "backward":

            MoveBackward()

        elif DroneCMD == "left":

            MoveLeft()

        elif DroneCMD == "right":

            MoveRight()

        elif DroneCMD == "rcw":

            RotateClockWise()

        elif DroneCMD == "rccw":

            RotateCounterClockWise()
        
        else:
            print("INVALID COMMAND")

    CmdSocket.close()
    exit()

DroneSetup()
 

