//SEE THE SCHEMATIC FOR FURTHER DETAILS ON HOW THE DRONE IS SET UP

/** Wireless Transmitter/Reciever Module 
 * DOWNLOAD THE nRF24LO1 MODULE FROM HERE: https://github.com/maniacbug/RF24
 * Extract it to the libraries folder of the arduino IDE, located in Documents > Arduino > libraries 
 * VIDEO EXAMPLE: https://www.youtube.com/watch?v=1ibAiPNeQSI 

    Board Setup: (SEE THE IMAGE ATTATCHED)
        # Connect the first pin to ground
        # Connect the second pin to the 3.3v pin of the arduino (DO NOT USE 5V OR IT WILL DESTROY THE MODULE)
        # Connect the 3rd pin to digital pin 7 of the arduino (can be others if desired)
        # Connect the 4th pin to the digital 8 pin of the arduino (can also be others if desired)
        # Connect the 5th pin to the digital 13 pin of the arduino 
        # Connect the 6th pin to the digital 11 pin of the arduino 
        # Connect the 7th pin to the digital 12 pin of the arduino
        # Connect the 8th pin to the 

        radio.stopListening() // This sets the wireless tranciever module as transmitter
        radio.startListening() // This sets the wireless tranciever module as reciever

**/

/** GY-521 Module 

    Breadboard setup:
        # Install the module on the breadboard
        # Provide 5v to the module
        # Provide Ground to the module
        # Connect a pin from the SCL pin of the arduino to the pin of the module
        # Connect a pin from the SDA pin of the arduino to the pin of the module 

**/

#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>
#include "Wire.h" // This library allows you to communicate with I2C devices (GY_521 Module).
#include <Servo.h>

//Min and Max values to send to our ESC Motors 
#define MAX_SIGNAL 2000
#define MIN_SIGNAL 1000 

//Servo Motor Objects (ESC's) and corresponding pins
Servo ESCPin3, ESCPin5, ESCPin9, ESCPin10;
int Pin3 = 3;
int Pin5 = 5;
int Pin9 = 9;
int Pin10 = 10;
int Motor3 = 1100;
int Motor5 = 1100;
int Motor9 = 1100;
int Motor10 = 1100;
int CurrentMotorValue3;
int CurrentMotorValue5;
int CurrentMotorValue9;
int CurrentMotorValue10;

//Wireless Reciever Objects
RF24 radio(7, 8); //Radio object
const byte DataChannel[][6] = {"00001", "00002"}; //address of the communication channel of the transmitter
const char DroneCmd[35] = ""; //Drone Cmd being read
const char RecieverResponse[] = "CMD RECIEVED & EXECUTED!";


//GY_521 Objects
const int GY_521_Addr = 0x68; // I2C address of the MPU-6050 (GY_521 module). If AD0 pin is set to HIGH, the I2C address will be 0x69.
int16_t accelerometer_x, accelerometer_y, accelerometer_z; // variables for accelerometer raw data
int16_t gyro_x, gyro_y, gyro_z; // variables for gyro raw data
int16_t temperature; // variables for temperature data
char tmp_str[7]; // temporary variable used in convert function

char* convert_int16_to_str(int16_t i) { // converts int16 to string. Moreover, resulting strings will have the same length in the debug monitor.
  sprintf(tmp_str, "%6d", i);
  return tmp_str;
}

void GY521Data()
{
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B); // starting with register 0x3B (ACCEL_XOUT_H) [MPU-6000 and MPU-6050 Register Map and Descriptions Revision 4.2, p.40]
  Wire.endTransmission(false); // the parameter indicates that the Arduino will send a restart. As a result, the connection is kept active.
  Wire.requestFrom(MPU_ADDR, 7*2, true); // request a total of 7*2=14 registers
  
  // "Wire.read()<<8 | Wire.read();" means two registers are read and stored in the same variable
  accelerometer_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x3B (ACCEL_XOUT_H) and 0x3C (ACCEL_XOUT_L)
  accelerometer_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x3D (ACCEL_YOUT_H) and 0x3E (ACCEL_YOUT_L)
  accelerometer_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x3F (ACCEL_ZOUT_H) and 0x40 (ACCEL_ZOUT_L)
  temperature = Wire.read()<<8 | Wire.read(); // reading registers: 0x41 (TEMP_OUT_H) and 0x42 (TEMP_OUT_L)
  gyro_x = Wire.read()<<8 | Wire.read(); // reading registers: 0x43 (GYRO_XOUT_H) and 0x44 (GYRO_XOUT_L)
  gyro_y = Wire.read()<<8 | Wire.read(); // reading registers: 0x45 (GYRO_YOUT_H) and 0x46 (GYRO_YOUT_L)
  gyro_z = Wire.read()<<8 | Wire.read(); // reading registers: 0x47 (GYRO_ZOUT_H) and 0x48 (GYRO_ZOUT_L)
  
  // print out data
  Serial.print("aX = "); Serial.print(convert_int16_to_str(accelerometer_x));
  Serial.print(" | aY = "); Serial.print(convert_int16_to_str(accelerometer_y));
  Serial.print(" | aZ = "); Serial.print(convert_int16_to_str(accelerometer_z));
  // the following equation was taken from the documentation [MPU-6000/MPU-6050 Register Map and Description, p.30]
  Serial.print(" | tmp = "); Serial.print(temperature/340.00+36.53);
  Serial.print(" | gX = "); Serial.print(convert_int16_to_str(gyro_x));
  Serial.print(" | gY = "); Serial.print(convert_int16_to_str(gyro_y));
  Serial.print(" | gZ = "); Serial.print(convert_int16_to_str(gyro_z));
  Serial.println();
  
  // delay
  delay(1000);
}

void FlightController()
{
    //The drone will begin waiting for a command to be recieved through the wireless reciever 
    while(true)
    {
        radio.startListening(); //Sets the nRF24L01 module to listen for data

        //If data is recieved, we read in the data
        if (radio.available())
        {
            bool RecievedData = radio.read(&DroneCmd, sizeof(DroneCmd));
                        
            //If the data is read successfully, we simply send an acknowledgement packet to our transmitter
            if (RecievedData == true)
            {   
                //Print the data 
                Serial.println(DroneCmd);
                delay(500);

                //Writes the acknowledgement data packet
                radio.stopListening(); //Stops waiting for data so we can transmit data
                bool WriteResponse = radio.write(&RecieverResponse, sizeof(RecieverResponse));
                delay(500);

                //After the acknowledgement data packet is sent, the command will be executed

                //KEYBOARD COMMANDS

                //Take off
                if (Drone == "1")
                {
                   //All four motors will accelerate at the same speed, and the drone will take off
                   ESCPin3.writeMicroseconds(1100);
                   delay(500);
                   ESCPin5.writeMicroseconds(1100);
                   delay(500);
                   ESCPin9.writeMicroseconds(1100);
                   delay(500);
                   ESCPin10.writeMicroseconds(1100);
                   delay(500);
                   break;
                }

                //Land
                if (Drone == "0")
                {
                   //All motors will decrease in velocity slowly until the drown is at a safe landing position to land the drone
                   ESCPin3.writeMicroseconds(1010);
                   delay(500);
                   ESCPin5.writeMicroseconds(1010);
                   delay(500);
                   ESCPin9.writeMicroseconds(1010);
                   delay(500);
                   ESCPin10.writeMicroseconds(1010);
                   
                   delay(1500);

                   ESCPin3.writeMicroseconds(1000);
                   delay(500);
                   ESCPin5.writeMicroseconds(1000);
                   delay(500);
                   ESCPin9.writeMicroseconds(1000);
                   delay(500);
                   ESCPin10.writeMicroseconds(1000);
                   delay(500);
                   break;
                }

                //Move Up
                if (Drone == "5")
                {
                    CurrentMotorValue3 = Motor3+=100;
                    CurrentMotorValue5 = Motor5+=100;
                    CurrentMotorValue9 = Motor9+=100;
                    CurrentMotorValue10 = Motor10+=100;

                   //These conditionals will prevent the drone from exceeding the maximum value that can be ran 
                   if (CurrentMotorValue3 <= MAX_SIGNAL && CurrentMotorValue5 <= MAX_SIGNAL && CurrentMotorValue9 <= MAX_SIGNAL && CurrentMotorValue10 <= MAX_SIGNAL)
                   {                         
                        //All motors will increase at the same speed to raise the altitude of the drone in the air
                        ESCPin3.writeMicroseconds(CurrentMotorValue3);
                        delay(500);
                        ESCPin5.writeMicroseconds(CurrentMotorValue5);
                        delay(500);
                        ESCPin9.writeMicroseconds(CurrentMotorValue9);
                        delay(500);
                        ESCPin10.writeMicroseconds(CurrentMotorValue10);
                        delay(500);
                        break;
                   }
                   
                   //If a value above 2000 is entered, 2000 will simply be written again, preventing the value from changing
                   if (CurrentMotorValue3 > MAX_SIGNAL && CurrentMotorValue5 > MAX_SIGNAL && CurrentMotorValue9 > MAX_SIGNAL && CurrentMotorValue10 > MAX_SIGNAL)
                   {
                        ESCPin3.writeMicroseconds(MAX_SIGNAL);
                        delay(500);
                        ESCPin5.writeMicroseconds(MAX_SIGNAL);
                        delay(500);
                        ESCPin9.writeMicroseconds(MAX_SIGNAL);
                        delay(500);
                        ESCPin10.writeMicroseconds(MAX_SIGNAL);
                        delay(500);

                        CurrentMotorValue3 = Motor3-=100;
                        CurrentMotorValue5 = Motor5-=100;
                        CurrentMotorValue9 = Motor9-=100;
                        CurrentMotorValue10 = Motor10-=100;
                        break;
                   }
                }

                //Move Down
                if (Drone == "3")
                {
                    CurrentMotorValue3 = Motor3-=100;
                    CurrentMotorValue5 = Motor5-=100;
                    CurrentMotorValue9 = Motor9-=100;
                    CurrentMotorValue10 = Motor10-=100;

                   //These conditionals will prevent the drone from going below the minimum value that can be ran 
                   if (CurrentMotorValue3 >= 1100 && CurrentMotorValue5 >= 1100 && CurrentMotorValue9 >= 1100 && CurrentMotorValue10 >= 1100)
                   {
                        //All motors will decrease at the same speed to lower the altitude of the drone in the air
                        ESCPin3.writeMicroseconds(CurrentMotorValue3);
                        delay(500);
                        ESCPin5.writeMicroseconds(CurrentMotorValue5);
                        delay(500);
                        ESCPin9.writeMicroseconds(CurrentMotorValue9);
                        delay(500);
                        ESCPin10.writeMicroseconds(CurrentMotorValue10);
                        delay(500);
                        break;
                   }
                   
                   //If a value below 1000 is entered, 1000 will simply be written again, preventing the value from changing
                   if (CurrentMotorValue3 < 1100 && CurrentMotorValue5 < 1100 && CurrentMotorValue9 < 1100 && CurrentMotorValue10 < 1100)
                   {
                        ESCPin3.writeMicroseconds(1100);
                        delay(500);
                        ESCPin5.writeMicroseconds(1100);
                        delay(500);
                        ESCPin9.writeMicroseconds(1100);
                        delay(500);
                        ESCPin10.writeMicroseconds(1100);
                        delay(500);

                        CurrentMotorValue3 = Motor3+=100;
                        CurrentMotorValue5 = Motor5+=100;
                        CurrentMotorValue9 = Motor9+=100;
                        CurrentMotorValue10 = Motor10+=100;
                        break;
                   }
                }

                //Move Forward
                if (Drone == "8")
                {
                    CurrentMotorValue9 = Motor9+=200;
                    CurrentMotorValue10 = Motor10+=200;

                   //if the motor that needs to increase its speed, is <= to that of the MAX_SIGNAL, boost the 2 corresponding motors
                   if (CurrentMotorValue9 <= MAX_SIGNAL && CurrentMotorValue10 <= MAX_SIGNAL)
                   {
                       //Boost the speed of the Back-Right and Back-Left motors by 200
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);

                       CurrentMotorValue9 = Motor9-=200;
                       CurrentMotorValue10 = Motor10-=200;

                       //Decrease the speed by 200 to set it back to normal
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);
                       break;
                       
                   }

                   //if the 2 desired motors to boost are greater than the MAX_SIGNAL value, decrease the front motors speed 
                   if (CurrentMotorValue9 > MAX_SIGNAL && CurrentMotorValue10 > MAX_SIGNAL)
                   {
                       CurrentMotorValue3 = Motor3-=200;
                       CurrentMotorValue5 = Motor5-=200;

                       //Decrease the speed of the Front-Right and Front-Left motors by 200
                       ESCPin3.writeMicroseconds(CurrentMotorValue3);
                       delay(500);
                       ESCPin5.writeMicroseconds(CurrentMotorValue5);
                       delay(500);

                       CurrentMotorValue3 = Motor3+=200;
                       CurrentMotorValue5 = Motor5+=200;

                       //Increase the speed by 200 to set it back to normal
                       ESCPin3.writeMicroseconds(Motor3+=200);
                       delay(500);
                       ESCPin5.writeMicroseconds(Motor5+=200);
                       delay(500);

                       CurrentMotorValue9 = Motor9-=200;
                       CurrentMotorValue10 = Motor10-=200;
                       break;

                   }
                
                }

                //Move BackWard
                if (Drone == "2")
                {
                    CurrentMotorValue3 = Motor3+=200;
                    CurrentMotorValue5 = Motor5+=200;

                   //if the motor that needs to increase its speed, is <= to that of the MAX_SIGNAL, boost the 2 corresponding motors
                   if (CurrentMotorValue3 <= MAX_SIGNAL && CurrentMotorValue5 <= MAX_SIGNAL)
                   {
                       //Boost the speed of the Front-Right and Front-Left motors by 200
                       ESCPin3.writeMicroseconds(CurrentMotorValue3);
                       delay(500);
                       ESCPin5.writeMicroseconds(CurrentMotorValue5);
                       delay(500);

                       CurrentMotorValue3 = Motor3-=200;
                       CurrentMotorValue5 = Motor5-=200;

                       //Decrease the speed by 200 to set it back to normal
                       ESCPin3.writeMicroseconds(CurrentMotorValue3);
                       delay(500);
                       ESCPin5.writeMicroseconds(CurrentMotorValue5);
                       delay(500);
                       break;
                       
                   }

                   //if the 2 desired motors to boost are greater than the MAX_SIGNAL value, decrease the front motors speed 
                   if (CurrentMotorValue3 > MAX_SIGNAL && CurrentMotorValue5 > MAX_SIGNAL)
                   {
                       CurrentMotorValue9 = Motor9-=200;
                       CurrentMotorValue10 = Motor10-=200;

                       //Decrease the speed of the Back-Right and Back-Left motors by 200
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);

                       CurrentMotorValue9 = Motor9+=200;
                       CurrentMotorValue10 = Motor10+=200;

                       //Increase the speed by 200 to set it back to normal
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);

                       CurrentMotorValue3 = Motor3-=200;
                       CurrentMotorValue5 = Motor5-=200;
                       break;

                   }
                
                }

                //Move Left
                if (Drone == "4")
                {
                    CurrentMotorValue3 = Motor3+=200;
                    CurrentMotorValue10 = Motor10+=200;

                   //if the motor that needs to increase its speed, is <= to that of the MAX_SIGNAL, boost the 2 corresponding motors
                   if (CurrentMotorValue3 <= MAX_SIGNAL && CurrentMotorValue10 <= MAX_SIGNAL)
                   {
                       //Boost the speed of the Front-Right and Back-Right motors by 200
                       ESCPin3.writeMicroseconds(CurrentMotorValue3);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);

                       CurrentMotorValue3 = Motor3-=200;
                       CurrentMotorValue10 = Motor10-=200;

                       //Decrease the speed by 200 to set it back to normal
                       ESCPin3.writeMicroseconds(CurrentMotorValue3);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);
                       break;
                       
                   }

                   //if the 2 desired motors to boost are greater than the MAX_SIGNAL value, decrease the front motors speed 
                   if (CurrentMotorValue3 > MAX_SIGNAL && CurrentMotorValue10 > MAX_SIGNAL)
                   {
                       CurrentMotorValue5 = Motor5-=200;
                       CurrentMotorValue9 = Motor9-=200;

                       //Decrease the speed of the Front-Left and Back-Left motors by 200
                       ESCPin5.writeMicroseconds(CurrentMotorValue5);
                       delay(500);
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);

                       CurrentMotorValue5 = Motor5+=200;
                       CurrentMotorValue9 = Motor9+=200;

                       //Increase the speed by 200 to set it back to normal
                       ESCPin5.writeMicroseconds(CurrentMotorValue5);
                       delay(500);
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);

                       CurrentMotorValue3 = Motor3-=200;
                       CurrentMotorValue10 = Motor10-=200;
                       break;

                   }
                
                }

                //Move Right
                if (Drone == "8")
                {
                    CurrentMotorValue5 = Motor5+=200;
                    CurrentMotorValue9 = Motor9+=200;

                   //if the motor that needs to increase its speed, is <= to that of the MAX_SIGNAL, boost the 2 corresponding motors
                   if (CurrentMotorValue5 <= MAX_SIGNAL && CurrentMotorValue9 <= MAX_SIGNAL)
                   {
                       //Boost the speed of the Front-Left and Back-Left motors by 200
                       ESCPin5.writeMicroseconds(CurrentMotorValue5);
                       delay(500);
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);

                       CurrentMotorValue5 = Motor5-=200;
                       CurrentMotorValue9 = Motor9-=200;

                       //Decrease the speed by 200 to set it back to normal
                       ESCPin5.writeMicroseconds(CurrentMotorValue5);
                       delay(500);
                       ESCPin9.writeMicroseconds(CurrentMotorValue9);
                       delay(500);
                       break;
                       
                   }

                   //if the 2 desired motors to boost are greater than the MAX_SIGNAL value, decrease the front motors speed 
                   if (CurrentMotorValue5 > MAX_SIGNAL && CurrentMotorValue9 > MAX_SIGNAL)
                   {
                       CurrentMotorValue3 = Motor3-=200;
                       CurrentMotorValue10 = Motor10-=200;

                       //Decrease the speed of the Front-Right and Back-Right motors by 200
                       ESCPin3.writeMicroseconds(CurrentMotorValue3);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);

                       CurrentMotorValue3 = Motor3+=200;
                       CurrentMotorValue10 = Motor10+=200;

                       //Increase the speed by 200 to set it back to normal
                       ESCPin3.writeMicroseconds(CurrentMotorValue3);
                       delay(500);
                       ESCPin10.writeMicroseconds(CurrentMotorValue10);
                       delay(500);

                       CurrentMotorValue5 = Motor5-=200;
                       CurrentMotorValue9 = Motor9-=200;
                       break;

                   }
                
                }


                /** TESTING
                //Rotate ClockWise (LEARN THIS LATER)
                if (Drone == "9")
                {
                   //All four motors will accelerate at the same speed, and the drone will take off
                   ESCPin3.writeMicroseconds(MIN_SIGNAL);
                   ESCPin5.writeMicroseconds(MIN_SIGNAL);
                   ESCPin9.writeMicroseconds(MIN_SIGNAL);
                   ESCPin10.writeMicroseconds(MIN_SIGNAL);
                   
                   //The loop will end, termination the function
                    break;
                }

                //Rotate Counter-ClockWise
                if (Drone == "7")
                {
                   //All four motors will accelerate at the same speed, and the drone will take off
                   ESCPin3.writeMicroseconds(MIN_SIGNAL);
                   ESCPin5.writeMicroseconds(MIN_SIGNAL);
                   ESCPin9.writeMicroseconds(MIN_SIGNAL);
                   ESCPin10.writeMicroseconds(MIN_SIGNAL);
                   
                   //The loop will end, termination the function
                    break;
                }

                **/

            }
        
        }

    }
    
}

void setup()
{
    //Begin setting up the serial communication with the COM port to the computer
    Serial.begin(9600);

    //Begin seting up communication between the reciever and transmitter nRF24L01 modules
    radio.begin(); //Begins radio communicationn
    radio.openWritingPipe(DataChannel[1]); // Writes data to a defined address
    radio.openReadingPipe(1, DataChannel[0]); // Recieves response data 
    radio.setPALevel(RF24_PA_MIN); //Power Amplifier level

    //Begin setting up communication with the GY_521 module 
    Wire.begin();
    Wire.beginTransmission(GY_521_Addr); // Begins a transmission to the I2C slave (GY-521 board)
    Wire.write(0x6B); // PWR_MGMT_1 register
    Wire.write(0); // set to zero (wakes up the MPU-6050)
    Wire.endTransmission(true);

    //Begin Attatching all the motors to their respective pins
    ESCPin3.attach(Pin3);
    ESCPin5.attach(Pin5);
    ESCPin9.attach(Pin9);
    ESCPin10.attach(Pin10);
    delay(2000);

    //Begin setting up the ESC motors and set the throttle of the motor to 0%
    ESCPin3.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin5.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin9.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    ESCPin10.writeMicroseconds(MIN_SIGNAL);
    delay(500);
    
}

//Main()
void loop()
{   
   
   FlightController(); //Starts the flight controller
   //GY521Data(); //Records the Position of the drone in the air
   
}

